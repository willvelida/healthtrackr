name: Healthtrackr.Api.Activity

env:
    DOTNET_VERSION: '7.0.x'
    COVERAGE_PATH: ${{ github.workspace }}/coverage
    COVERAGE_LOCATION: ${{ github.workspace }}/.coverage

on:
    push:
      branches:
        - main
      paths:
        - Healthtrackr.Api.Activity/**
    workflow_dispatch:

permissions:
    id-token: write
    contents: read
        
jobs:
    run-unit-tests:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: './Healthtrackr.Api.Activity/src/Healthtrackr.Api.Activity'
        steps:
          - name: 'Checkout GitHub Action'
            uses: actions/checkout@main

          - name: 'Setup dotnet'
            uses: actions/setup-dotnet@v3
            with:
              dotnet-version: ${{ env.DOTNET_VERSION }}

          - name: 'Install Dependencies'
            run: dotnet restore

          - name: 'Build project'
            run: dotnet build --no-restore

          - name: Test
            run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory ${{ env.COVERAGE_PATH }}
            
          - name: Copy Coverage to Predictable Location
            run: cp ${{ env.COVERAGE_PATH }}/*/coverage.cobertura.xml ${{ env.COVERAGE_PATH }}/coverage.cobertura.xml

          - name: Code Coverage Report
            uses: irongut/CodeCoverageSummary@v1.3.0
            with:
              filename: coverage/coverage.cobertura.xml
              badge: true
              fail_below_min: false
              format: markdown
              hide_branch_rate: false
              hide_complexity: true
              indicators: true
              output: both
              thresholds: '60 80'
          
    build-container-image:
        runs-on: ubuntu-latest
        needs: run-unit-tests
        defaults:
            run:
                working-directory: './Healthtrackr.Api.Activity/src/Healthtrackr.Api.Activity'
        steps:
            - uses: actions/checkout@v4
            - uses: azure/login@v1
              name: Sign in to Azure
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            
            - name: Get ACR name
              id: getacrname
              run: |
                acrName=$(az acr list --resource-group ${{ secrets.AZURE_RG }} --query "[0].name" -o tsv)
                echo "::set-output name=acrName::$acrName"
              
            - name: Get ACR Credentials
              id: getacrcreds
              run: |
                  loginServer=$(az acr list --resource-group ${{ secrets.AZURE_RG }} --query "[0].loginServer" -o tsv)
                  loginName=$(az acr credential show -n ${{ steps.getacrname.outputs.acrName }} --resource-group ${{ secrets.AZURE_RG }} --query username -o tsv)
                  password=$(az acr credential show -n ${{ steps.getacrname.outputs.acrName }} --resource-group ${{ secrets.AZURE_RG }} --query "passwords[0].value" -o tsv)
                  echo "::set-output name=loginServer::$loginServer"
                  echo "::set-output name=loginName::$loginName"
                  echo "::set-output name=password::$password"
            - name: 'Build and Push API Image to ACR'
              uses: azure/docker-login@v1
              with:
                login-server: ${{ steps.getacrcreds.outputs.loginServer }}
                username: ${{ steps.getacrname.outputs.acrName }}
                password: ${{ steps.getacrcreds.outputs.password }}
            - run: |
                docker build . -t ${{ steps.getacrcreds.outputs.loginServer }}/healthcheckr-activity-api:${{ github.sha }}
                docker push ${{ steps.getacrcreds.outputs.loginServer }}/healthcheckr-activity-api:${{ github.sha }}
        
    lint:
        runs-on: ubuntu-latest
        needs: build-container-image
        steps:
            - uses: actions/checkout@v4
            - name: Run Bicep Linter
              run: az bicep build --file ./Healthtrackr.Api.Activity/deploy/main.bicep

    validate:
        needs: lint
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: azure/login@v1
              name: Sign in to Azure
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

            - name: Get existing activity api image
              id: getimages
              run: |
                  echo "Installing containerapp extension"
                  az extension add -n containerapp --yes
                  apiImage=$(az containerapp show --name healthtrackr-activity-api --resource-group ${{ secrets.AZURE_RG }} --query "properties.template.containers[0].image" -o tsv)  
                  echo "::set-output name=apiImage::$apiImage"
                  
            - uses: azure/arm-deploy@v2
              name: Run preflight validation
              with:
                deploymentName: ${{ github.run_number }}
                resourceGroupName: ${{ secrets.AZURE_RG }}
                template: ./Healthtrackr.Api.Activity/deploy/main.bicep
                parameters: ./Healthtrackr.Api.Activity/deploy/parameters.prod.json sqlAdminLogin=${{ secrets.SQL_ADMIN }} sqlAdminPassword=${{ secrets.SQL_PASSWORD }} containerImage=${{ steps.getimages.outputs.apiImage }}
                deploymentMode: Validate
            
    preview:
        runs-on: ubuntu-latest
        needs: validate
        steps:
            - uses: actions/checkout@v4
            - uses: azure/login@v1
              name: Sign in to Azure
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

            - name: Get existing activity api image
              id: getimages
              run: |
                  echo "Installing containerapp extension"
                  az extension add -n containerapp --yes
                  apiImage=$(az containerapp show --name healthtrackr-activity-api --resource-group ${{ secrets.AZURE_RG }} --query "properties.template.containers[0].image" -o tsv)  
                  echo "::set-output name=apiImage::$apiImage"

            - uses: Azure/cli@v1
              name: Run what-if
              with:
                inlineScript: |
                    az deployment group what-if --resource-group ${{ secrets.AZURE_RG }} --template-file ./Healthtrackr.Api.Activity/deploy/main.bicep --parameters ./Healthtrackr.Api.Activity/deploy/parameters.prod.json sqlAdminLogin=${{ secrets.SQL_ADMIN }} sqlAdminPassword=${{ secrets.SQL_PASSWORD }} containerImage=${{ steps.getimages.outputs.apiImage }}

    deploy-infra:
        runs-on: ubuntu-latest
        environment: Production
        needs: preview
        steps:
            - uses: actions/checkout@v4          
            - uses: azure/login@v1
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

            - name: Get existing activity api image
              id: getimages
              run: |
                  echo "Installing containerapp extension"
                  az extension add -n containerapp --yes
                  apiImage=$(az containerapp show --name healthtrackr-activity-api --resource-group ${{ secrets.AZURE_RG }} --query "properties.template.containers[0].image" -o tsv)  
                  echo "::set-output name=apiImage::$apiImage"
                    
            - name: Deploy Bicep File
              uses: azure/arm-deploy@v2
              with:
                resourceGroupName: ${{ secrets.AZURE_RG }}
                template: ./Healthtrackr.Api.Activity/deploy/main.bicep
                parameters: ./Healthtrackr.Api.Activity/deploy/parameters.prod.json sqlAdminLogin=${{ secrets.SQL_ADMIN }} sqlAdminPassword=${{ secrets.SQL_PASSWORD }} containerImage=${{ steps.getimages.outputs.apiImage }}
                failOnStdErr: false
    
    deploy-to-blue:
        runs-on: ubuntu-latest
        needs: deploy-infra
        defaults:
          run:
            working-directory: './Healthtrackr.Api.Activity/src/Healthtrackr.Api.Activity'
        steps:
          - name: 'Checkout GitHub Action'
            uses: actions/checkout@main
      
          - name: 'Login via Azure CLI'
            uses: azure/login@v1
            with:
              client-id: ${{ secrets.AZURE_CLIENT_ID }}
              tenant-id: ${{ secrets.AZURE_TENANT_ID }}
              subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

          - name: 'Setup dotnet'
            uses: actions/setup-dotnet@v3
            with:
              dotnet-version: ${{ env.DOTNET_VERSION }}
              
          - name: Get ACR Login Server
            id: getacrserver
            run: |
              loginServer=$(az acr list --resource-group ${{ secrets.AZURE_RG }} --query "[0].loginServer" -o tsv)
              echo "::set-output name=loginServer::$loginServer"
      
          - name: Get current revision name
            id: getcurrentrevisionname
            run: |
                az extension add -n containerapp --yes
                currentRevision=$(az containerapp revision list -g ${{ secrets.AZURE_RG }} -n healthtrackr-activity-api --query 'reverse(sort_by([].{Revision:name,Replicas:properties.replicas,Active:properties.active,Created:properties.createdTime,FQDN:properties.fqdn}[?Active!=`false`], &Created))| [0].Revision' -o tsv)
                echo "::set-output name=currentRevision::$currentRevision"

          - name: 'Deploy to Blue Slot'
            uses: Azure/cli@v1
            with:
              inlineScript: |
                echo "Installing containerapp extension"
                az extension add -n containerapp --yes
                echo "Creating Blue Slot"
                az containerapp revision copy -n healthtrackr-activity-api -g ${{ secrets.AZURE_RG }} -i ${{ steps.getacrserver.outputs.loginServer }}/healthcheckr-activity-api:${{ github.sha }}
                az containerapp ingress traffic set -n healthtrackr-activity-api -g ${{ secrets.AZURE_RG }} --revision-weight ${{ steps.getcurrentrevisionname.outputs.currentRevision }}=100
                      
    promote-to-green:
        runs-on: ubuntu-latest
        needs: deploy-to-blue
        environment: Production
        steps:
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@main

        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        - name: Get ACR Login Server
          id: getacrserver
          run: |
            loginServer=$(az acr list --resource-group ${{ secrets.AZURE_RG }} --query "[0].loginServer" -o tsv)
            echo "::set-output name=loginServer::$loginServer"

        - name: Get blue slot
          id: getblueslot
          run: |
            az extension add -n containerapp --yes
            blueSlot=$(az containerapp revision list -g ${{ secrets.AZURE_RG }} -n healthtrackr-activity-api --query 'reverse(sort_by([].{Revision:name,Replicas:properties.replicas,Active:properties.active,Created:properties.createdTime,FQDN:properties.fqdn}[?Active!=`false`], &Created))| [0].Revision' -o tsv)
            echo "::set-output name=blueSlot::$blueSlot"
    
        - name: Promote blue to green slot
          uses: Azure/cli@v1
          with:
            inlineScript: |
              echo "Installing containerapp extension"
              az extension add -n containerapp --yes
              echo "Promoting Blue Slot to Green Slot"
              az containerapp ingress traffic set -n healthtrackr-activity-api -g ${{ secrets.AZURE_RG }} --revision-weight ${{ steps.getblueslot.outputs.blueSlot }}=100